{"schemaVersion":{"major":0,"patch":0,"minor":2},"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45k0x","interfaceLanguage":"swift"},"abstract":[{"text":"No overview available.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"]]},"metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"extendedModule":"Parsing","modules":[{"name":"Parsing"}],"symbolKind":"init","role":"symbol","externalID":"s:7Parsing7NewlineVAAq_Rsz11SubSequenceQzRs_s5UInt8V7ElementRtzrlEACyxxGycfc","roleHeading":"Initializer","title":"init()","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Input.SubSequence"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Input.Element"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"variants":[{"paths":["\/documentation\/parsing\/newline\/init()-45k0x"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"()","kind":"text"}],"platforms":["Linux"]}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"title":"Newline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Newline","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/newline","abstract":[{"type":"text","text":"A parser that consumes a single newline from the beginning of the input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","title":"Parsing","role":"collection","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-45k0x":{"title":"init()","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45k0x","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-45k0x","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bytes"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":", and "},{"code":"Input.Element","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}]},"abstract":[],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"kind":"symbol"}}}