{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:)-7b2he","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:)-8sywj","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:)-9kyot","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:by:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/areEquivalent","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/possibleMatch"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/Parser-Implementations"],"generated":true,"title":"Default Implementations"}],"schemaVersion":{"minor":2,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prefixupto"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixUpTo"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"This parser is named after ","type":"text"},{"code":"Sequence.prefix(upTo:)","type":"codeVoice"},{"text":", and uses similar logic under the hood to","type":"text"},{"text":" ","type":"text"},{"text":"consume and return input up to a particular subsequence.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let lineParser = PrefixUpTo(\"\\n\")","","var input = \"Hello\\nworld\\n\"[...]","try line.parse(&input)  \/\/ \"Hello\"","input                   \/\/ \"\\nworld\\n\""]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo"},"sections":[],"kind":"symbol","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"metadata":{"symbolKind":"struct","role":"symbol","modules":[{"name":"Parsing"}],"navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"roleHeading":"Structure","externalID":"s:7Parsing10PrefixUpToV","title":"PrefixUpTo","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","title":"Parser","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/init(_:by:)":{"url":"\/documentation\/parsing\/prefixupto\/init(_:by:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:by:)","kind":"symbol","abstract":[],"title":"init(_:by:)"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/possibleMatch":{"url":"\/documentation\/parsing\/prefixupto\/possiblematch","role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"possibleMatch","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/possibleMatch","kind":"symbol","abstract":[],"title":"possibleMatch"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/parse(_:)":{"url":"\/documentation\/parsing\/prefixupto\/parse(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/parse(_:)","kind":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured.","type":"text"}],"title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/Parser-Implementations":{"url":"\/documentation\/parsing\/prefixupto\/parser-implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/Parser-Implementations","kind":"article","abstract":[],"title":"Parser Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/init(_:)-8sywj":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:)-8sywj","role":"symbol","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Input.SubSequence","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Input.Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","url":"\/documentation\/parsing\/prefixupto\/init(_:)-8sywj","title":"init(_:)","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/init(_:)-9kyot":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"UTF8View","preciseIdentifier":"s:SS8UTF8ViewV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:)-9kyot","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring.UTF8View"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","url":"\/documentation\/parsing\/prefixupto\/init(_:)-9kyot","title":"init(_:)","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/init(_:)-7b2he":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/init(_:)-7b2he","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","url":"\/documentation\/parsing\/prefixupto\/init(_:)-7b2he","title":"init(_:)","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","role":"symbol","type":"topic","url":"\/documentation\/parsing\/prefixupto","title":"PrefixUpTo","navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo/areEquivalent":{"kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"areEquivalent","kind":"identifier"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo\/areEquivalent","role":"symbol","type":"topic","url":"\/documentation\/parsing\/prefixupto\/areequivalent","title":"areEquivalent","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","title":"Parsing","role":"collection","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic"}}}