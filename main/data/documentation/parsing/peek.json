{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships","type":"conformsTo"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/init(_:)"]},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/upstream"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/parse(_:)"],"title":"Instance Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/Parser-Implementations"],"generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"}]}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"It lets the upstream parser “peek” into the input without consuming it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, identifiers (variables, functions, etc.) in Swift allow the first character to be a"},{"type":"text","text":" "},{"type":"text","text":"letter or underscore, but not a digit, but subsequent characters can be digits. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"E.g."}]},{"type":"text","text":", "},{"code":"foo123","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is a valid identifier, but "},{"code":"123foo","type":"codeVoice"},{"type":"text","text":" is not. We can create an identifier parser by using "},{"code":"Peek","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to first check if the input starts with a letter or underscore, and if it does, return the"},{"type":"text","text":" "},{"type":"text","text":"remainder of the input up to the first character that is not a letter, a digit, or an"},{"type":"text","text":" "},{"type":"text","text":"underscore."}],"type":"paragraph"},{"syntax":"swift","code":["let identifier = Parse {","  Peek { Prefix(1) { $0.isLetter || $0 == \"_\" } }","  Prefix { $0.isNumber || $0.isLetter || $0 == \"_\" }","}"],"type":"codeListing"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek"},"kind":"symbol","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":2},"metadata":{"externalID":"s:7Parsing4PeekV","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct","title":"Peek","role":"symbol","modules":[{"name":"Parsing"}]},"variants":[{"paths":["\/documentation\/parsing\/peek"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","title":"Parser","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/upstream":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"upstream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/peek\/upstream","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/upstream","abstract":[],"kind":"symbol","title":"upstream"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","title":"init(_:)","abstract":[{"text":"Construct a parser that runs the given parser, but does not consume any input.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/init(_:)","url":"\/documentation\/parsing\/peek\/init(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/Parser-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/Parser-Implementations","url":"\/documentation\/parsing\/peek\/parser-implementations","abstract":[],"type":"topic","title":"Parser Implementations","role":"collectionGroup","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"url":"\/documentation\/parsing\/peek","kind":"symbol","title":"Peek","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"navigatorTitle":[{"text":"Peek","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/parse(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"type":"topic","kind":"symbol","title":"parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/parse(_:)","url":"\/documentation\/parsing\/peek\/parse(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","title":"Parsing","role":"collection","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic"}}}