{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"metadata":{"title":"Stream","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"role":"symbol","modules":[{"name":"Parsing"}],"symbolKind":"struct","roleHeading":"Structure","navigatorTitle":[{"text":"Stream","kind":"identifier"}],"externalID":"s:7Parsing6StreamV"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parsers"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"RangeReplaceableCollection","preciseIdentifier":"s:Sm"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"For example, the following parser can parse an integer followed by a newline from a collection","type":"text"},{"text":" ","type":"text"},{"text":"of UTF8 bytes:","type":"text"}]},{"type":"codeListing","code":["Parse {","  Int.parser(of: ArraySlice<UInt8>.self)","  StartsWith(\"\\n\".utf8)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:"}]},{"type":"codeListing","code":["Stream {","  Parse {","    Int.parser(of: ArraySlice<UInt8>.self)","    StartsWith(\"\\n\".utf8)","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And then it can be used on a stream, such as values coming from standard in:","type":"text"}]},{"type":"codeListing","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","try newlineSeparatedIntegers.parse(&stdin)"],"syntax":"swift"}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/stream"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/init(build:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/Parser-Implementations"]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","interfaceLanguage":"swift"},"relationshipsSections":[{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo"}],"schemaVersion":{"minor":2,"patch":0,"major":0},"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","title":"Parsing","role":"collection","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","title":"Parser","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream/parse(_:)":{"title":"parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s11AnyIteratorV","text":"AnyIterator"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":">) "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"role":"symbol","url":"\/documentation\/parsing\/stream\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/parse(_:)","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"url":"\/documentation\/parsing\/stream","kind":"symbol","title":"Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"navigatorTitle":[{"text":"Stream","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream/parsers":{"url":"\/documentation\/parsing\/stream\/parsers","type":"topic","kind":"symbol","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers"}],"title":"parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream/init(build:)":{"title":"init(build:)","abstract":[],"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"build"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"role":"symbol","url":"\/documentation\/parsing\/stream\/init(build:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/init(build:)","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream/Parser-Implementations":{"url":"\/documentation\/parsing\/stream\/parser-implementations","type":"topic","kind":"article","role":"collectionGroup","abstract":[],"title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream\/Parser-Implementations"}}}