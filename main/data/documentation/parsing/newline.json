{"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","interfaceLanguage":"swift"},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"title":"Conforms To","type":"conformsTo"}],"abstract":[{"text":"A parser that consumes a single newline from the beginning of the input.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":2},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45k0x","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45yib","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-93ai6","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-98ny1"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/Parser-Implementations"]}],"metadata":{"externalID":"s:7Parsing7NewlineV","symbolKind":"struct","role":"symbol","modules":[{"name":"Parsing"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"}],"roleHeading":"Structure","navigatorTitle":[{"text":"Newline","kind":"identifier"}],"title":"Newline"},"kind":"symbol","sections":[],"variants":[{"paths":["\/documentation\/parsing\/newline"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Bytes"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Bytes"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Bytes"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Bytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Bytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4UTF8a","text":"UTF8"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","text":"CodeUnit"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser only consumes a line feed ("},{"code":"\"\\n\"","type":"codeVoice"},{"type":"text","text":") or a carriage returns with line feed"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"\"\\r\\n\"","type":"codeVoice"},{"type":"text","text":"). If you need richer support that covers all unicode newline characters, use a"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","type":"reference","isActive":true},{"type":"text","text":" parser that operates on the "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":" level with a predicate that consumes a"},{"type":"text","text":" "},{"type":"text","text":"single newline:"}]}]},{"type":"paragraph","inlineContent":[{"text":"It will consume both line feeds (","type":"text"},{"code":"\"\\n\"","type":"codeVoice"},{"text":") and carriage returns with line feeds (","type":"text"},{"code":"\"\\r\\n\"","type":"codeVoice"},{"text":").","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"title":"Newline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Newline","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/newline","abstract":[{"type":"text","text":"A parser that consumes a single newline from the beginning of the input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"url":"\/documentation\/parsing\/prefix","title":"Prefix","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Prefix"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Prefix"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","title":"Parser","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-45yib":{"title":"init()","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45yib","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-45yib","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bytes"},{"text":" is ","type":"text"},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/Parser-Implementations":{"title":"Parser Implementations","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/parsing\/newline\/parser-implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-98ny1":{"title":"init()","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-98ny1","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-98ny1","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"text":" and ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-93ai6":{"title":"init()","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-93ai6","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-93ai6","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"code":"ArraySlice<UTF8.CodeUnit>","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Bytes","type":"codeVoice"},{"type":"text","text":" is "},{"code":"ArraySlice<UTF8.CodeUnit>","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/parse(_:)":{"title":"parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/parse(_:)","role":"symbol","url":"\/documentation\/parsing\/newline\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-45k0x":{"title":"init()","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45k0x","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-45k0x","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bytes"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":", and "},{"code":"Input.Element","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}]},"abstract":[],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","title":"Parsing","role":"collection","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic"}}}